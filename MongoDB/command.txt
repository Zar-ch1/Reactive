 show databases;

 use react_8th_batch_test

 show collections;

 db.test.insertOne(
   {
     title: "The Favourite",
     genres: [ "Drama", "History" ],
     runtime: 121,
     rated: "R",
     year: 2018,
     directors: [ "Yorgos Lanthimos" ],
     cast: [ "Olivia Colman", "Emma Stone", "Rachel Weisz" ],
     type: "movie"
   }
 )

 db.test.insertOne(
    {
      title: "The Favourite",
      genres: [ "Drama", "History" ],
      runtime: 121,
      rated: "R",
      year: 2018,
      directors: [ "Yorgos Lanthimos" ],
      actors: [{
            firstName: "Leonardo",
            lastName: "Decaprio"}],
      type: "movie"
    }
  )

   db.movies.insertMany(
     [
     {
       title: "The Favourite 2",
       genres: [ "Drama", "History" ],
       runtime: 121,
       rated: "R",
       year: 2018,
       directors: [ "Yorgos Lanthimos" ],
       cast: [ "Olivia Colman", "Emma Stone", "Rachel Weisz" ],
       type: "movie"
     },
     {
            title: "The Favourite 3",
            genres: [ "Drama", "History" ],
            runtime: 121,
            rated: "R",
            year: 2020,
            directors: [ "Yorgos Lanthimos" ],
            cast: [ "Olivia Colman", "Emma Stone", "Rachel Weisz" ],
            type: "movie"
     },
     ]
   )

   db.movies.find(); //find(all)
   db.movies.find({year:2020}); //find with specify 

   db.inventory.insertMany([
  {
    item: 'journal',
    qty: 25,
    size: { h: 14, w: 21, uom: 'cm' },
    status: 'A'
  },
  {
    item: 'notebook',
    qty: 50,
    size: { h: 8.5, w: 11, uom: 'in' },
    status: 'A'
  },
  {
    item: 'paper',
    qty: 100,
    size: { h: 8.5, w: 11, uom: 'in' },
    status: 'D'
  },
  {
    item: 'planner',
    qty: 75,
    size: { h: 22.85, w: 30, uom: 'cm' },
    status: 'D'
  },
  {
    item: 'postcard',
    qty: 45,
    size: { h: 10, w: 15.25, uom: 'cm' },
    status: 'A'
  }
]);

db.inventory.find({qty: {$gt:50}}); //find with greater than
db.inventory.find({qty: {$gte:50}}); //find with greater than equal

//AND
db.inventory.find({qty: {$gte:50},
                  item : "paper"}); // AND operator with comma


//OR
db.inventory.find({$or:[{qty: {$gt:50}}
                       ,{item: "journal"}]}); // OR logic with $or and match item with json


//NOT 
db.inventory.find({item: 
                    {$not:/journal/}  //regex is regular expression
                  });
//NE 
db.inventory.find({item: 
                    {$ne:'journal'} 
                  });

//IN 
db.inventory.find({status:{ $in: ["A", "D"]}});

//(A and B) OR (A and C)
db.inventory.find({$or:
                      [
                        {
                          {field_1: value_1}, //A
                          {field_2: value_2} //B
                        },
                        {
                          field_1: value_1, //A
                          field_3: value_3, //C
                        }
                      ]
                  })



db.inventory.find( { "size.uom": "in" } )
db.inventory.find( { "size.h": { $lt: 15 } } )
db.inventory.find( { size: { h: 14, w: 21, uom: "cm" } } )//exact match

//exact match
db.inventory.find( { tags: ["red", "blank"] } )
//all
db.inventory.find( { tags: { $all: ["red", "blank"] } } )
//find element
db.inventory.find( { tags: "red" } )

db.inventory.find( { dim_cm: { $gt: 15, $lt: 20 } } )

//element match
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )

db.inventory.find( { "dim_cm.1": { $gt: 25 } } )

//moSue
db.inventory.find( { dim_cm: { $gt: 20, $lt: 15 } } );

db.inventory.find( { "instock": { warehouse: "A", qty: 5 } } )

db.inventory.find( { 'instock.0.qty': { $lte: 20 } } )

db.inventory.find( { "instock": { $elemMatch: { qty: 5, warehouse: "A" } } } )

db.inventory.find( { "instock.qty": { $gt: 10,  $lte: 20 } } )

db.inventory.find( { "instock.qty": 5, "instock.warehouse": "A" } )

db.inventory.find();//all document

db.inventory.find({},{status:1, size:1}) //projection choose column
          this 1 is true

db.inventory.find({},{status:0}) // except status


                      //filter        projection
db.inventory.find( { status: "A" }, { item: 1, status: 1 } )


db.inventory.find( { status: "A" }, { item: 1, status: 1, _id: 0 } ) 
//if don't want _id

//update
db.inventory.updateOne({_id:ObjectId('666981f843e3e0f0d8cdcdf8')},  
    [
      { $set: { status: "Modified", comments: [ "One", "Two" ] } },
      { $unset: ["size"]}
    ])


db.inventory.deleteOne({_id: ObjectId('666981f843e3e0f0d8cdcdf6')})